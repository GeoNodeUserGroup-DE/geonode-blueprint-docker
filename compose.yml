include:
  - ./compose-volumes_${VOLUMES:-default}.yml

# Common Django template for GeoNode and Celery services below
x-common-django:
  &default-common-django
  image: ${DOCKER_REGISTRY}${DOCKER_REPOSITORY}${COMPOSE_PROJECT_NAME}_django:${GEONODE_BASE_IMAGE_VERSION}-${PROJECT_VERSION}
  build:
    context: ./docker/geonode
    dockerfile: Dockerfile
    args:
      - BASE_IMAGE_VERSION=${GEONODE_BASE_IMAGE_VERSION}
  restart: always
  env_file:
    - .env
  volumes:
    # configuration
    - ./geonode/geonode/settings_override.py:/usr/src/geonode/geonode/settings_override.py
    - ./geonode/uploaded/subsites:/mnt/volumes/statics/uploaded/subsites
    - ./geonode/uwsgi.ini:/usr/src/geonode/uwsgi.ini
    - ./geonode/fixtures:/usr/src/geonode/fixtures
    # contrib apps
    - ./geonode/apps/customizations:/usr/src/geonode/customizations
    - ./geonode/apps/externalapplications/externalapplications:/usr/src/geonode/externalapplications
    # volumes
    - statics:/mnt/volumes/statics
    - geoserver-data-dir:/geoserver_data/data
    - backup-restore:/backup_restore
    - data:/data
    - tmp:/tmp
  depends_on:
    db:
      condition: service_healthy
    data-dir-conf:
      condition: service_healthy

services:

  # Our custom django application. It includes Geonode.
  django:
    << : *default-common-django
    container_name: django4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8000/"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 10
    environment:
      - DJANGO_SETTINGS_MODULE=geonode.settings_override
      - IS_CELERY=False
    entrypoint: ["/usr/src/geonode/entrypoint.sh"]
    command: "uwsgi --ini /usr/src/geonode/uwsgi.ini"

  # Celery worker that executes celery tasks created by Django.
  celery:
    << : *default-common-django
    container_name: celery4${COMPOSE_PROJECT_NAME}
    depends_on:
      - django
    environment:
      - DJANGO_SETTINGS_MODULE=geonode.settings_override
      - IS_CELERY=True
    entrypoint: ["/usr/src/geonode/entrypoint.sh"]
    command: "celery-cmd"

  # Nginx is serving django static and media files and proxies to django and geonode
  geonode:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${NGINX_BASE_IMAGE_VERSION}
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    env_file: ./.env
    environment:
      - HTTPS_HOST=${SITE_HOST_NAME}
      # emtpy HTTP_x to only allow HTTPS connections
      #- HTTP_HOST=${GEONODE_LB_HOST_IP}
      - LETSENCRYPT_MODE=disabled
      - RESOLVER=127.0.0.11
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - statics:/mnt/volumes/statics
        # files are expected to exist within the context 
      - ${CERT_PATH_CHAIN:-./docker/nginx/cert.pem}:/geonode-certificates/autoissued/fullchain.pem
      - ${CERT_PATH_KEY:-./docker/nginx/key.pem}:/geonode-certificates/autoissued/privkey.pem
    restart: always

  # Geoserver backend
  geoserver:
    build:
      context: ./docker/geoserver
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${GEOSERVER_BASE_IMAGE_VERSION}
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    env_file: ./.env
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/ows"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 10
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
      - data:/data
      - tmp:/tmp
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      data-dir-conf:
        condition: service_healthy

  data-dir-conf:
    build:
      context: ./docker/geoserver_data
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${GEOSERVER_DATA_BASE_IMAGE_VERSION}
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    entrypoint: sleep infinity
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    restart: unless-stopped
    healthcheck:
      test: "ls -A '/geoserver_data/data' | wc -l"

  # PostGIS database.
  db:
    build:
      context: ./docker/postgresql
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${POSTGRES_BASE_IMAGE_VERSION}
    command: postgres -c "max_connections=${POSTGRES_MAX_CONNECTIONS}"
    container_name: db4${COMPOSE_PROJECT_NAME}
    env_file: ./.env
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -d postgres -U postgres"

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3-alpine
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: unless-stopped
